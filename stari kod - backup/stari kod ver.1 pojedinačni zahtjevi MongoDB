# OVO JE STARI KOD KOJI RADI
# MongoDB pojedinačni zahtjevi, bez indeksa

#-------------------------------------------------------------------------------
#-----------------------------------# PAKETI #----------------------------------

library(shiny)
library(bslib)
library(DT)
library(httr)
library(jsonlite)
library(tidyverse)
library(data.table)
library(shinydashboard)
library(mongolite)

library(microbenchmark) # izračun vremena operacija

# Učitavanje zasebnih skripti
source("functions.R")
source("pristupni_podaci.R")


dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
  response <- GET("http://dac.hr/api/v1/query",
                  query = list(
                    q = search_term,
                    history = history,  # Koristi history parametar iz UI
                    limit = limit,
                    skip = skip,
                    part = part
                  ),
                  add_headers(`X-DataApi-Key` = "59dd75a6525e"))

  # Provjera statusnog koda odgovora
  if (httr::status_code(response) != 200) {
    stop("HTTP request failed with status ", httr::status_code(response))
  }

  res <- content(response)
  if (is.null(res$hits) || length(res$hits) == 0) {
    return(data.table())  # Vraća prazan data.table ako nema rezultata
  } else {
    dt <- rbindlist(res$hits, fill = TRUE)
    return(dt)
  }
}

# Funkcija za dohvaćanje dokumenta iz MongoDB baze
MongoDB_get_doc <- function(ids) {
  documents <- lapply(ids, function(id) {
    parts <- unlist(strsplit(id, split = "-"))
    lrUnitNumber <- parts[length(parts)]  # Zadnji element kao string
    mainBookId <- as.numeric(parts[length(parts)-1])  # Predzadnji element pretvoren u numeric

    query <- sprintf('{"lrUnitNumber": "%s", "mainBookId": %d}', lrUnitNumber, mainBookId)
    conn <- mongo(collection = collection_name, db = db_name, url = db_url)
    document <- conn$find(query)

    return(document)
  })

  return(documents)
}


# Funkcija za izvlačenje 'fileUrl' iz dokumenta
MongoDB_urls <- function(documents) {
  fileUrls <- vapply(documents, function(doc) {
    # Ovaj uvjet provjerava postoji li 'fileUrl' u dokumentu i vraća ga ako postoji
    if (!is.null(doc$fileUrl)) {
      return(doc$fileUrl[[1]])
    } else {
      # Vraća NA ako 'fileUrl' nije pronađen u dokumentu
      return(NA_character_)  # Ovdje je ispravno korištenje NA_character_ umjesto NA
    }
  }, FUN.VALUE = character(1))  # Ovdje osiguravamo da povratna vrijednost bude karakter
  return(fileUrls)
}

#-------------------------------------------------------------------------------
#------------------------------# UI (User interface) #--------------------------

ui <- dashboardPage(
  dashboardHeader(title = "Forensis"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Pretraga", tabName = "pretraga", icon = icon("search")),
      menuItem("Analiza", tabName = "analiza", icon = icon("chart-line"))
    ),
    collapsible = TRUE,
    collapsed = TRUE
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "pretraga",
              fluidPage(
                titlePanel("Pretraga Katastra"),
                sidebarLayout(
                  sidebarPanel(
                    textInput("term", "Unesite pojam za pretragu katastra", value = ""),
                    radioButtons("checkbox", "Pretraži dio",
                                 choices = list("Sve" = "0", "Dio A" = "1", "Dio B" = "2", "Dio C" = "3"),
                                 selected = "0"),
                    radioButtons("history", "Povijest",
                                 choices = list("Da" = "true", "Ne" = "false"),
                                 selected = "true"),
                    actionButton("pretraga", "Pretraži", style = "width:100%;")  # Gumb sada zauzima cijelu širinu sidebar-a
                  ),
                  mainPanel(
                    dataTableOutput("rezultati_tab")
                  )
                )
              )
      ),
      tabItem(tabName = "analiza",
              fluidPage(
                titlePanel("Analiza Podataka")
              )
      )
    )
  )
)

#-------------------------------------------------------------------------------
#-----------------------------------# SERVER #----------------------------------

server <- function(input, output) {
  pretraga_rezultati <- eventReactive(input$pretraga, {
    req(input$term)  # Osigurava da je termin unesen

    # Dohvaćanje rezultata pretrage
    dt <- dac_hr_api(input$term, input$checkbox, input$history)
    if (nrow(dt) == 0) return(data.table())  # Vraća prazan data.table ako nema rezultata

    # Dohvaćanje dokumenata
    documents <- MongoDB_get_doc(dt$id)
    dt[, fileUrl := sapply(documents, function(doc) {
      if (!is.null(doc$fileUrl)) {
        return(doc$fileUrl[[1]])
      } else {
        return(NA_character_)  # Koristi NA_character_ za karakterne NAs
      }
    })]

    base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
    dt[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]  # Ažuriranje URL-a

    dt  # Povrat ažuriranog data.table-a
  })

  output$rezultati_tab <- renderDT({
    datatable(pretraga_rezultati(), escape = FALSE, options = list(
      columnDefs = list(
        list(targets = ncol(pretraga_rezultati()),
             render = JS(
               "function(data, type, row) {
                 return type === 'display' && data ? '<a href=\"' + data + '\" target=\"_blank\">Open</a>' : data;
               }"
             )
        )
      )
    ))
  })
}

# Prazan server za probu UI-a
# server <- function(input, output) {}
#-------------------------------------------------------------------------------

# upali aplikaciju
shinyApp(ui, server)










