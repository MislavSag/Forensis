368589252b15a9de615a4cd08e64babc7e20b027 mmatic97 Fri May 24 10:59:22 2024 +0200 kozmetičke promjene
diff --git a/app.R b/app.R
index 003afa9..fc09cbb 100644
--- a/app.R
+++ b/app.R
@@ -38,13 +38,13 @@ ui <- dashboardPage(
   dashboardBody(
     tabItems(
       tabItem(tabName = "zemljisne_knjige",
-              MUI1_zemljisne_knjige("zemljisne_knjige1")
+              MUI_zemljisne_knjige("zemljisne_knjige1")
       ),
       tabItem(tabName = "registar_plovila",
-              MUI1_registar_plovila("registar_plovila1")
+              MUI_registar_plovila("registar_plovila1")
       ),
       tabItem(tabName = "forensis_dokument",
-              MUI1_forensis_dokument("forensis_dokument1")
+              MUI_forensis_dokument("forensis_dokument1")
       )
     )
   )
diff --git a/functions.R b/functions.R
index 1d6c1b9..10cfcda 100644
--- a/functions.R
+++ b/functions.R
@@ -1,5 +1,5 @@
 # Funkcija za dohvaćanje podataka iz API-ja
-zkrh <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+zkrh <- function(search_term, part, history = "false", limit = 200, skip = 0) {
   response <- GET("http://dac.hr/api/v1/query",
                   query = list(
                     q = search_term,
diff --git a/mod_forensis_dokument.R b/mod_forensis_dokument.R
index ca5e6be..5deb0a7 100644
--- a/mod_forensis_dokument.R
+++ b/mod_forensis_dokument.R
@@ -1,6 +1,6 @@
 # mod_forensis_dokument.R
 
-MUI1_forensis_dokument <- function(id) {
+MUI_forensis_dokument <- function(id) {
   ns <- NS(id)
   fluidPage(
     titlePanel("Forensis dokument"),
diff --git a/mod_registar_plovila.R b/mod_registar_plovila.R
index a37e39e..c3e581d 100644
--- a/mod_registar_plovila.R
+++ b/mod_registar_plovila.R
@@ -1,6 +1,6 @@
 # mod_registar_plovila.R
 
-MUI1_registar_plovila <- function(id) {
+MUI_registar_plovila <- function(id) {
   ns <- NS(id)
   fluidPage(
     titlePanel("Registar plovila RH"),
diff --git a/mod_zemljisne_knjige.R b/mod_zemljisne_knjige.R
index 9353602..e9e6547 100644
--- a/mod_zemljisne_knjige.R
+++ b/mod_zemljisne_knjige.R
@@ -1,6 +1,6 @@
 # mod_zemljisne_knjige.R
 
-MUI1_zemljisne_knjige <- function(id) {
+MUI_zemljisne_knjige <- function(id) {
   ns <- NS(id)
   fluidPage(
     titlePanel("Zemljišne knjige RH"),
@@ -13,10 +13,11 @@ MUI1_zemljisne_knjige <- function(id) {
         radioButtons(ns("history"), "Povijest",
                      choices = list("Da" = "true", "Ne" = "false"),
                      selected = "true"),
+        sliderInput(ns("limit"), "Limit rezultata:", min = 50, max = 1000, value = 200, step = 50),
         actionButton(ns("pretraga"), "Pretraži", style = "width:100%;")
       ),
       mainPanel(
-        uiOutput(ns("rezultati_tab")) %>% withSpinner(type = 1, color = "#0dc5c1")
+        uiOutput(ns("rezultati_tab")) %>% withSpinner(type = 8, color = "#0dc5c1")
       )
     )
   )
@@ -27,14 +28,14 @@ MS_zemljisne_knjige <- function(input, output, session) {
     req(input$term)
 
     # Dohvaćanje rezultata pretrage iz API-ja
-    api_data <- zkrh(input$term, input$checkbox, input$history)
-    if (nrow(api_data) == 0) return(NULL)
+    zkrh_data <- zkrh(input$term, input$checkbox, input$history, limit = input$limit)
+    if (nrow(zkrh_data) == 0) return(NULL)
 
     # Dohvaćanje dokumenata iz MongoDB-a
-    mongo_data <- mongoDB(api_data$id)
+    mongo_data <- mongoDB(zkrh_data$id)
 
     # Spajanje podataka
-    final_data <- spoji_podatke(api_data, mongo_data)
+    final_data <- spoji_podatke(zkrh_data, mongo_data)
 
     # Ažuriranje URL-a
     base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
@@ -74,4 +75,3 @@ MS_zemljisne_knjige <- function(input, output, session) {
     }
   })
 }
-
diff --git a/modul_nekretnine_rh.R b/modul_nekretnine_rh.R
deleted file mode 100644
index f94781c..0000000
--- a/modul_nekretnine_rh.R
+++ /dev/null
@@ -1,106 +0,0 @@
-
-
-Sys.getenv("TOKEN")
-Sys.getenv("IME")
-
-
-api_key <- Sys.getenv("TOKEN")
-print(api_key)
-
-# DATA API ----------------------------------------------------------------
-# Search ZK
-zk_l = lapply(terms, function(x) {
-  p = GET("http://dac.hr/api/v1/query",
-          query = list(
-            q = x,
-            history = "false",
-            part = 2, # 1 SVe , 2 B
-            limit = 100,
-            skip = 0
-          ),
-          add_headers(`X-DataApi-Key` = api_key))
-  res = content(p)
-  res = rbindlist(res$hits)
-  as.data.table(cbind.data.frame(term = x, res))
-})
-lapply(zk_l, function(x) nrow(x))
-lapply(zk_l, function(x) nrow(x[type == "zk"]))
-zkdt = rbindlist(zk_l)
-zkdt_unique = unique(zkdt[, .SD, .SDcols = -"term"])
-
-
-#-------------------------------------------------------------------------------
-
-# Osnovni URL API-ja
-url <- "http://dac.hr/api/v1/query"
-
-# Postavljanje headera zahtjeva
-headers <- add_headers(`X-DataApi-Key` = "59dd75a6525e")
-
-# Definiranje pojmova za pretragu
-pojmovi <- c("INA d.d.", "Ina - industrija nafte d.d.", "27759560625")
-
-# Možda korisni drugi pojmovi ? - asocijacije s Info.Biz
-# (1) adresa: "Avenija Većeslava Holjevca 10, 10000 Zagreb"
-# (2) matični broj: "03586243"
-# (3) djelatnost: "1920 - Proizvodnja rafiniranih naftnih proizvoda"
-
-# Prazni data.table za spremanje rezultata
-rezultati_dt <- data.table()
-
-# Petlja za iteraciju kroz svaki pojam i izvršavanje API zahtjeva
-for (pojam in pojmovi) {
-  # Postavljanje parametara zahtjeva za svaki pojam
-  params <- list(
-    q = pojam,
-    history = "true",
-    limit = 1000,
-    skip = 0
-  )
-
-  # Slanje GET zahtjeva
-  response <- GET(url, query = params, headers)
-
-  # Dohvaćanje sirovog sadržaja odgovora
-  res_raw <- content(response, "text")
-
-  # Dekodiranje JSON sadržaja u listu
-  # ovo mi je napravio chat GPT i ima više smisla nego direktno res <- content(response)
-  res <- fromJSON(res_raw)
-
-  # Ako res$hits ne postoji, preskoči ovu iteraciju
-  if (is.null(res$hits) || length(res$hits) == 0) next
-
-  # Pretvaranje dobivenih podataka u data.table
-  dt <- rbindlist(list(res$hits), fill = TRUE)
-
-  # Ako nema imena, preskoči daljnje obrade
-  if (is.null(colnames(dt))) next
-
-  # Dodavanje kolone 'pojam' s trenutnim pojmom pretrage
-  dt[, pojam := pojam]
-
-  # Spremanje rezultata u glavni data.table
-  rezultati_dt <- rbindlist(list(rezultati_dt, dt), fill = TRUE)
-}
-
-# Eksportiranje finalnih rezultata u CSV datoteku
-fwrite(rezultati_dt, "INA_podaci.csv")
-# Eksportiranje finalnih rezultata u Excel datoteku
-write.xlsx(rezultati_dt, "INA_podaci.xlsx")
-
-
-# Ovo je kratki kod da maknem dupliće (meni najlakše preko tidyverse, ali mogu napisati u data.table)
-rezultati_unique <- rezultati_dt %>%
-  select(!pojam) %>%
-  unique()
-
-
-
-
-
-
-
-
-
-
diff --git a/radna_skripta.R b/radna_skripta.R
index b7a1ccb..8f0bc8d 100644
--- a/radna_skripta.R
+++ b/radna_skripta.R
@@ -1,7 +1,7 @@
 #-------------------------------------------------------------------------------
-#---------------------------# dac_hr_api funckija #-----------------------------
+#-------------------------------# zkrh funckija #-------------------------------
 
-dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+zkrh <- function(search_term, part, history = "false", limit = 50, skip = 0) {
   response <- GET("http://dac.hr/api/v1/query",
                   query = list(
                     q = search_term,
@@ -29,7 +29,7 @@ dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip =
 # u funckiju za shiny se id dodatno dijeli na inentifikatore koji služe za spajanje
 # podataka sa MongoDB dokumentima
 
-dac_dt <- dac_hr_api("62694367015", 0, history = "false")
+zkrh_dt <- zkrh("Darko Matić", 0, history = "false", limit = 20)
 
 #-------------------------------------------------------------------------------
 #------------------------# Izvlačenje url-a iz MongoDB #------------------------
@@ -344,7 +344,7 @@ library(microbenchmark)
 benchmark_result <- microbenchmark(
   old = get_doc_MongoDB_old(ids_50),
   new = get_doc_MongoDB_atlas(ids_50),
-  times = 20  # Broj ponavljanja testa za bolju statistiku
+  times = 3  # Broj ponavljanja testa za bolju statistiku
 )
 
 # Ispis rezultata

5650cf8cea77d54c50dbf5e7b350d12a8fa046e0 mmatic97 Wed May 22 20:18:17 2024 +0200 atlas
diff --git a/#todo b/#todo
index 89a1a6c..5dda525 100644
--- a/#todo
+++ b/#todo
@@ -1,17 +1,11 @@
-# history parametar tražilica - DA/NE
-
-# ovo ubaciti u kod: httr::status_code(response) - 200 oznaka za uspješan zahtjev
-
-
-### MONGODB skupni zahtjevi
-# skini URL i ID i onda spoji
-# bolji način: Mongo vrati redosljed URL po kojem je poslan upit
-# Mongo mi moze vratiti samo ID i URL, ne treba cijeli json
-
-# INDEKSI
-# napraviti dva pojedinačna umjesto jedan slozeni indeks
-# zašto ne moze napraviti slozeni indeks ?
-
-# Shiny modul
+# NOVO:
+# "NEMA REZULTATA PRETRAGE" - dodano u app
+# Moduli napravljeni
+# spiner dodan kod pretrazivanja
+# novi nazivi stupaca
+# Atlas search
+
+# U IZRADI:
+## REPORT ##
 
 
diff --git a/app.R b/app.R
index 8c56d82..003afa9 100644
--- a/app.R
+++ b/app.R
@@ -6,19 +6,19 @@ library(bslib)
 library(DT)
 library(httr)
 library(jsonlite)
-# library(tidyverse) # TODO: install individual packages
 library(data.table)
 library(shinydashboard)
 library(mongolite)
-
-# library(microbenchmark) # izračun vremena operacija
+library(shinycssloaders) # ovo je za spinera kod pretraživanja / maknuti ?
 
 # Učitavanje zasebnih skripti
 source("functions.R")
+source("mod_zemljisne_knjige.R")
+source("mod_registar_plovila.R")
+source("mod_forensis_dokument.R")
 
 # Učitajte varijable okruženja
 db_url <- Sys.getenv("db_url")
-print(db_url)
 db_name <- Sys.getenv("db_name")
 collection_name <- Sys.getenv("collection_name")
 
@@ -28,38 +28,23 @@ ui <- dashboardPage(
   dashboardHeader(title = "Forensis"),
   dashboardSidebar(
     sidebarMenu(
-      menuItem("Pretraga", tabName = "pretraga", icon = icon("search")),
-      menuItem("Analiza", tabName = "analiza", icon = icon("chart-line"))
+      menuItem("Zemljišne knjige RH", tabName = "zemljisne_knjige", icon = icon("book")),
+      menuItem("Registar plovila RH", tabName = "registar_plovila", icon = icon("ship")),
+      menuItem("Forensis dokument", tabName = "forensis_dokument", icon = icon("file-alt"))
     ),
     collapsible = TRUE,
     collapsed = TRUE
   ),
   dashboardBody(
     tabItems(
-      tabItem(tabName = "pretraga",
-              fluidPage(
-                titlePanel("Pretraga Katastra"),
-                sidebarLayout(
-                  sidebarPanel(
-                    textInput("term", "Unesite pojam za pretragu katastra", value = ""),
-                    radioButtons("checkbox", "Pretraži dio",
-                                 choices = list("Sve" = "0", "Dio A" = "1", "Dio B" = "2", "Dio C" = "3"),
-                                 selected = "0"),
-                    radioButtons("history", "Povijest",
-                                 choices = list("Da" = "true", "Ne" = "false"),
-                                 selected = "true"),
-                    actionButton("pretraga", "Pretraži", style = "width:100%;")
-                  ),
-                  mainPanel(
-                    dataTableOutput("rezultati_tab")
-                  )
-                )
-              )
+      tabItem(tabName = "zemljisne_knjige",
+              MUI1_zemljisne_knjige("zemljisne_knjige1")
+      ),
+      tabItem(tabName = "registar_plovila",
+              MUI1_registar_plovila("registar_plovila1")
       ),
-      tabItem(tabName = "analiza",
-              fluidPage(
-                titlePanel("Analiza Podataka")
-              )
+      tabItem(tabName = "forensis_dokument",
+              MUI1_forensis_dokument("forensis_dokument1")
       )
     )
   )
@@ -68,52 +53,13 @@ ui <- dashboardPage(
 #-------------------------------------------------------------------------------
 #-----------------------------------# SERVER #----------------------------------
 
-server <- function(input, output) {
-  pretraga_rezultati <- eventReactive(input$pretraga, {
-    req(input$term)
-
-    # Dohvaćanje rezultata pretrage iz API-ja
-    api_data <- dac_hr_api(input$term, input$checkbox, input$history)
-    if (nrow(api_data) == 0) return(data.table(Rezultat = "Nem rezultata pretrage"))
-
-    # Dohvaćanje dokumenata iz MongoDB-a
-    mongo_data <- get_doc_MongoDB(api_data$id)
-
-    # Spajanje podataka
-    final_data <- spoji_podatke(api_data, mongo_data)
-
-    # Ažuriranje URL-a
-    base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
-    final_data[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]
-
-    # Odabir potrebnih varijabli
-    final_data <- final_data[, .(id, type, unit, institution, book, status, burden, fileUrl)]
-
-    return(final_data)
-  })
-
-  output$rezultati_tab <- renderDT({
-    if (length(pretraga_rezultati()) == 0) {
-      return(data.table(Rezultat = "Nem rezultata pretrage"))
-    }
-
-    datatable(pretraga_rezultati(), escape = FALSE, options = list(
-      columnDefs = list(
-        list(targets = ncol(pretraga_rezultati()),  # Dinamičko određivanje indeksa stupca fileUrl
-             render = JS(
-               "function(data, type, row) {
-                 return type === 'display' && data ? '<a href=\"' + data + '\" target=\"_blank\">Open</a>' : data;
-               }"
-             )
-        )
-      )
-    ))
-  })
+server <- function(input, output, session) {
+  callModule(MS_zemljisne_knjige, "zemljisne_knjige1")
+  callModule(MS_registar_plovila, "registar_plovila1")
+  callModule(MS_forensis_dokument, "forensis_dokument1")
 }
 
 #-------------------------------------------------------------------------------
 
 # Pokretanje aplikacije
 shinyApp(ui, server)
-
-
diff --git a/functions.R b/functions.R
index 80638c6..1d6c1b9 100644
--- a/functions.R
+++ b/functions.R
@@ -1,8 +1,3 @@
-db_url <- Sys.getenv("db_url")
-db_name <- Sys.getenv("db_name")
-collection_name <- Sys.getenv("collection_name")
-
-
 # Funkcija za dohvaćanje podataka iz API-ja
 zkrh <- function(search_term, part, history = "false", limit = 50, skip = 0) {
   response <- GET("http://dac.hr/api/v1/query",
@@ -35,29 +30,60 @@ zkrh <- function(search_term, part, history = "false", limit = 50, skip = 0) {
   }
 }
 
-# Funkcija za dohvaćanje dokumenata iz MongoDB baze
-get_doc_MongoDB <- function(ids) {
-  # Povezivanje na MongoDB
+# funkcija sa dohvaćanje dokumenata iz MongoDB baze
+# koristi se atlas search (22.05.) koji je znatno skratio vrijeme dohvate docc
+mongoDB <- function(ids) {
   conn <- mongo(collection = collection_name, db = db_name, url = db_url)
 
-  # Razdvajanje ID-ova na dijelove
-  id_parts <- tstrsplit(ids, "-", fixed = TRUE)
-  conditions <- data.table(
-    lrUnitNumber = id_parts[[4]],
-    mainBookId = as.numeric(id_parts[[3]])
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+    list(
+      'compound' = list(
+        'must' = list(
+          list(
+            'text' = list(
+              'query' = lrUnitNumber,
+              'path' = 'lrUnitNumber'
+            )
+          ),
+          list(
+            'equals' = list(
+              'path' = 'mainBookId',
+              'value' = mainBookId
+            )
+          )
+        )
+      )
+    )
+  })
+
+  combined_conditions <- list(
+    'should' = conditions
   )
 
-  # Konverzija uvjeta u listu imenovanih listi
-  conditions_list <- lapply(1:nrow(conditions), function(i) {
-    list(lrUnitNumber = conditions$lrUnitNumber[i], mainBookId = conditions$mainBookId[i])
-  })
+  search_query <- list(
+    list(
+      '$search' = list(
+        'index' = 'ids',
+        'compound' = combined_conditions
+      )
+    ),
+    list(
+      '$project' = list(
+        'institutionId' = 1,
+        'lrUnitNumber' = 1,
+        'mainBookId' = 1,
+        'fileUrl' = 1
+      )
+    )
+  )
+
+  search_query_json <- toJSON(search_query, auto_unbox = TRUE)
 
-  # Konverzija u JSON format
-  query <- jsonlite::toJSON(list('$or' = conditions_list), auto_unbox = TRUE)
+  documents <- conn$aggregate(pipeline = search_query_json)
 
-  # Pokretanje upita
-  documents <- conn$find(query, fields = '{"institutionId" : true, "lrUnitNumber" : true,
-                                          "mainBookId" : true, "fileUrl" : true}')
   conn$disconnect()
 
   return(documents)
diff --git a/mod_forensis_dokument.R b/mod_forensis_dokument.R
new file mode 100644
index 0000000..ca5e6be
--- /dev/null
+++ b/mod_forensis_dokument.R
@@ -0,0 +1,14 @@
+# mod_forensis_dokument.R
+
+MUI1_forensis_dokument <- function(id) {
+  ns <- NS(id)
+  fluidPage(
+    titlePanel("Forensis dokument"),
+    # Prazno mjesto za buduću funkcionalnost
+    p("Ovdje će biti funkcionalnost za Forensis dokument.")
+  )
+}
+
+MS_forensis_dokument <- function(input, output, session) {
+  # Logika za Forensis dokument će doći ovdje
+}
diff --git a/mod_registar_plovila.R b/mod_registar_plovila.R
new file mode 100644
index 0000000..a37e39e
--- /dev/null
+++ b/mod_registar_plovila.R
@@ -0,0 +1,14 @@
+# mod_registar_plovila.R
+
+MUI1_registar_plovila <- function(id) {
+  ns <- NS(id)
+  fluidPage(
+    titlePanel("Registar plovila RH"),
+    # Prazno mjesto za buduću funkcionalnost
+    p("Ovdje će biti funkcionalnost za Registar plovila RH.")
+  )
+}
+
+MS_registar_plovila <- function(input, output, session) {
+  # Logika za Registar plovila RH će doći ovdje
+}
diff --git a/mod_zemljisne_knjige.R b/mod_zemljisne_knjige.R
new file mode 100644
index 0000000..9353602
--- /dev/null
+++ b/mod_zemljisne_knjige.R
@@ -0,0 +1,77 @@
+# mod_zemljisne_knjige.R
+
+MUI1_zemljisne_knjige <- function(id) {
+  ns <- NS(id)
+  fluidPage(
+    titlePanel("Zemljišne knjige RH"),
+    sidebarLayout(
+      sidebarPanel(
+        textInput(ns("term"), "Unesite pojam za pretragu katastra", value = ""),
+        radioButtons(ns("checkbox"), "Pretraži dio",
+                     choices = list("Sve" = "0", "Dio A" = "1", "Dio B" = "2", "Dio C" = "3"),
+                     selected = "0"),
+        radioButtons(ns("history"), "Povijest",
+                     choices = list("Da" = "true", "Ne" = "false"),
+                     selected = "true"),
+        actionButton(ns("pretraga"), "Pretraži", style = "width:100%;")
+      ),
+      mainPanel(
+        uiOutput(ns("rezultati_tab")) %>% withSpinner(type = 1, color = "#0dc5c1")
+      )
+    )
+  )
+}
+
+MS_zemljisne_knjige <- function(input, output, session) {
+  pretraga_rezultati <- eventReactive(input$pretraga, {
+    req(input$term)
+
+    # Dohvaćanje rezultata pretrage iz API-ja
+    api_data <- zkrh(input$term, input$checkbox, input$history)
+    if (nrow(api_data) == 0) return(NULL)
+
+    # Dohvaćanje dokumenata iz MongoDB-a
+    mongo_data <- mongoDB(api_data$id)
+
+    # Spajanje podataka
+    final_data <- spoji_podatke(api_data, mongo_data)
+
+    # Ažuriranje URL-a
+    base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
+    final_data[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]
+
+    # Odabir potrebnih varijabli i promjena imena stupaca
+    final_data <- final_data[, .(id, type, unit, institution, book, status, burden, fileUrl)]
+    setnames(final_data, old = c("id", "type", "unit", "institution", "book", "status", "burden", "fileUrl"),
+             new = c("ID", "Vrsta knjige", "Broj zemljišta (kat. čestice)", "Općinski sud / ZK odjel", "Glavna knjiga", "Status", "Teret", "Link"))
+
+    return(final_data)
+  })
+
+  output$rezultati_tab <- renderUI({
+    results <- pretraga_rezultati()
+    if (is.null(results) || nrow(results) == 0) {
+      return(HTML("<p style='font-size: 20px; color: red; font-weight: bold;'>Nema rezultata pretrage</p>"))
+    } else {
+      return(DT::dataTableOutput(session$ns("results_table")))
+    }
+  })
+
+  output$results_table <- DT::renderDataTable({
+    results <- pretraga_rezultati()
+    if (!is.null(results) && nrow(results) > 0) {
+      datatable(results, escape = FALSE, options = list(
+        columnDefs = list(
+          list(targets = ncol(results),  # Dinamičko određivanje indeksa stupca Link
+               render = JS(
+                 "function(data, type, row) {
+                   return type === 'display' && data ? '<a href=\"' + data + '\" target=\"_blank\">Open</a>' : data;
+                 }"
+               )
+          )
+        )
+      ))
+    }
+  })
+}
+
diff --git a/radna_skripta.R b/radna_skripta.R
index 0cd3dbd..b7a1ccb 100644
--- a/radna_skripta.R
+++ b/radna_skripta.R
@@ -255,6 +255,109 @@ spoji_podatke <- function(api_data, mongo_data) {
   return(spojena_tablica)
 }
 
+#-------------------------------------------------------------------------------
+#-----------------------# Benchmark - MongoDB Atlas search #--------------------
+
+get_doc_MongoDB_old <- function(ids) {
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+    list(lrUnitNumber = lrUnitNumber, mainBookId = mainBookId)
+  })
+
+  query <- jsonlite::toJSON(list('$or' = conditions), auto_unbox = TRUE)
+  documents <- conn$find(query, fields = '{"institutionId" : true, "lrUnitNumber" : true,
+                                          "mainBookId" : true, "fileUrl" : true}')
+  conn$disconnect()
+
+  return(documents)
+}
+
+get_doc_MongoDB_atlas <- function(ids) {
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+    list(
+      'compound' = list(
+        'must' = list(
+          list(
+            'text' = list(
+              'query' = lrUnitNumber,
+              'path' = 'lrUnitNumber'
+            )
+          ),
+          list(
+            'equals' = list(
+              'path' = 'mainBookId',
+              'value' = mainBookId
+            )
+          )
+        )
+      )
+    )
+  })
+
+  combined_conditions <- list(
+    'should' = conditions
+  )
+
+  search_query <- list(
+    list(
+      '$search' = list(
+        'index' = 'ids',
+        'compound' = combined_conditions
+      )
+    ),
+    list(
+      '$project' = list(
+        'institutionId' = 1,
+        'lrUnitNumber' = 1,
+        'mainBookId' = 1,
+        'fileUrl' = 1
+      )
+    )
+  )
+
+  search_query_json <- toJSON(search_query, auto_unbox = TRUE)
+
+  documents <- conn$aggregate(pipeline = search_query_json)
+
+  conn$disconnect()
+
+  return(documents)
+}
+
+# TESTIRANJE FUNKCIJA U SERVERU
+api_data <- zkrh("Darko Matić", 0, "true") # 62694367015
+ids_50 <- c(api_data$id)
+
+
+# Usporedba vremena izvršavanja
+library(microbenchmark)
+
+benchmark_result <- microbenchmark(
+  old = get_doc_MongoDB_old(ids_50),
+  new = get_doc_MongoDB_atlas(ids_50),
+  times = 20  # Broj ponavljanja testa za bolju statistiku
+)
+
+# Ispis rezultata
+print(benchmark_result)
+
+# Vizualizacija rezultata
+library(ggplot2)
+autoplot(benchmark_result)
+
+
+# Stara Funkcija: Prosječno vrijeme izvršavanja je oko 31.757 sekundi (31.757 ms), što je značajno sporije.
+# Nova Funkcija: Prosječno vrijeme izvršavanja je oko 0.654 sekundi (654 ms), što je nevjerojatno brže.
+
 #-------------------------------------------------------------------------------
 #---------------------------------# indexes #-----------------------------------
 
@@ -273,11 +376,16 @@ indexes <- conn$index()
 # Zatvaranje konekcije
 conn$disconnect()
 
+# 22.05.2024. Atlas search koji koristi složeni indeks sa 2 polja je u funkciji i
+# ispravan. Rezultat je znatno smanjenje potrebnog vremena za dohvaćanje dokumenata
+# vidi .txt skriptu u backup folderu - napisani su queryji za atlas search koji se
+# mogu provesti na MonogDB webu. Iz toga je kreiran kod u R-u i automatizacija
+
 #-------------------------------------------------------------------------------
 #-------------------------------# Testiranje Servera #--------------------------
 
 # TESTIRANJE FUNKCIJA U SERVERU
-api_data <- dac_hr_api("47432874968", 0, "true") # 62694367015
+api_data <- zkrh("62694367015", 0, "true") # 62694367015
 
 ids <- c(api_data$id)
 
@@ -294,118 +402,3 @@ final_data <- final_data[, .(id, type, unit, institution, book, status, burden,
 
 #-------------------------------------------------------------------------------
 
-
-
-# TEST ATLAS SEARCH -------------------------------------------------------
-# Replace with your actual connection details
-conn <- mongo(collection = collection_name, db = db_name, url = db_url)
-
-# FIELDS_NAME_Q = [
-#   "ownershipSheetB.lrUnitShares.lrOwners.name",
-#   "ownershipSheetB.lrUnitShares.lrOwners.taxNumber",
-#   "ownershipSheetB.lrUnitShares.subSharesAndEntries.lrOwners.name"
-# ]
-
-# Define the search query using the aggregation pipeline
-desired_lrUnitNumber_value <- 1202 # Replace with the actual integer value you are searching for
-desired_mainBookId_value <- "21148" # Replace with the actual string value you are searching for
-
-query <- sprintf('[
-  {
-    "$search": {
-      "index": "ids",
-      "compound": {
-        "should": [
-          {
-            "equals": {
-              "value": %d,
-              "path": "lrUnitNumber"
-            }
-          },
-          {
-            "text": {
-              "query": "%s",
-              "path": "mainBookId"
-            }
-          }
-        ]
-      }
-    }
-  }
-]', desired_lrUnitNumber_value, desired_mainBookId_value)
-# Execute the search query
-results <- conn$aggregate(pipeline = query)
-
-# Print the search results
-print(results)
-
-
-
-
-# Install and load the mongolite package
-install.packages("mongolite")
-library(mongolite)
-
-# Define the connection URI, database, and collection
-uri <- "your_atlas_connection_string" # Replace with your Atlas connection string
-database_name <- "your_database_name" # Replace with your database name
-collection_name <- "your_collection_name" # Replace with your collection name
-
-# Create a connection to the MongoDB collection
-collection <- mongo(collection = collection_name, db = database_name, url = uri)
-
-# Define the search query with multiple combinations
-query <- '[
-  {
-    "$search": {
-      "index": "ids",
-      "compound": {
-        "should": [
-          {
-            "compound": {
-              "must": [
-                { "equals": { "value": %d, "path": "lrUnitNumber" } },
-                { "text": { "query": "%s", "path": "mainBookId" } }
-              ]
-            }
-          },
-          {
-            "compound": {
-              "must": [
-                { "equals": { "value": %d, "path": "lrUnitNumber" } },
-                { "text": { "query": "%s", "path": "mainBookId" } }
-              ]
-            }
-          },
-          {
-            "compound": {
-              "must": [
-                { "equals": { "value": %d, "path": "lrUnitNumber" } },
-                { "text": { "query": "%s", "path": "mainBookId" } }
-              ]
-            }
-          }
-        ]
-      }
-    }
-  }
-]'
-
-# Replace placeholders with actual values
-lrUnitNumber_values <- c(12345, 67890, 11121) # Replace with the actual integer values
-mainBookId_values <- c("bookId1", "bookId2", "bookId3") # Replace with the actual string values
-
-# Use R's sprintf to inject the actual values into the query
-query <- sprintf(query,
-                 lrUnitNumber_values[1], mainBookId_values[1],
-                 lrUnitNumber_values[2], mainBookId_values[2],
-                 lrUnitNumber_values[3], mainBookId_values[3]
-)
-
-# Perform the aggregation query
-results <- collection$aggregate(query)
-
-# Print the search results
-print(results)
-
-
diff --git a/stari kod - backup/atlas search query b/stari kod - backup/atlas search query
new file mode 100644
index 0000000..1e4ce24
--- /dev/null
+++ b/stari kod - backup/atlas search query	
@@ -0,0 +1,98 @@
+# Atlas search upit:
+# upute:
+https://www.mongodb.com/docs/atlas/atlas-search/operators-and-collectors/
+# izrada indeksa u bazi:
+https://cloud.mongodb.com/v2/64b401172ace6257474bda06#/clusters/atlasSearch/nekretnine?collectionName=zk&database=zkrh&indexName=ids&view=SearchTester
+
+# ovo je kod za sa jedinstvenom kombinacijom lrUnitNumber i mainBookId
+za pronalazak jednog dokumenta
+[
+  {
+    "$search": {
+      "index": "ids",
+      "compound": {
+        "must": [
+          {
+            "text": {
+              "query": "13132",
+              "path": "lrUnitNumber"
+            }
+          },
+          {
+            "equals": {
+              "path": "mainBookId",
+              "value": 50135
+            }
+          }
+        ]
+      }
+    }
+  }
+]
+
+# ovo je kod za pretraživanje 3 dokumenta:
+[
+  {
+    "$search": {
+      "index": "ids",
+      "compound": {
+        "should": [
+          {
+            "compound": {
+              "must": [
+                {
+                  "text": {
+                    "query": "13132",
+                    "path": "lrUnitNumber"
+                  }
+                },
+                {
+                  "equals": {
+                    "path": "mainBookId",
+                    "value": 50135
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "compound": {
+              "must": [
+                {
+                  "text": {
+                    "query": "6017",
+                    "path": "lrUnitNumber"
+                  }
+                },
+                {
+                  "equals": {
+                    "path": "mainBookId",
+                    "value": 30827
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "compound": {
+              "must": [
+                {
+                  "text": {
+                    "query": "25005",
+                    "path": "lrUnitNumber"
+                  }
+                },
+                {
+                  "equals": {
+                    "path": "mainBookId",
+                    "value": 30827
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      }
+    }
+  }
+]
diff --git "a/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB" "b/stari kod - backup/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB"
similarity index 100%
rename from "stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB"
rename to "stari kod - backup/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB"

0635e38f02705a2ade5b8a128f318de87ed42ee7 MislavSag Fri May 17 13:06:32 2024 +0200 upsrw
diff --git a/app.R b/app.R
index df2b686..8c56d82 100644
--- a/app.R
+++ b/app.R
@@ -117,11 +117,3 @@ server <- function(input, output) {
 shinyApp(ui, server)
 
 
-
-
-
-
-
-
-
-
diff --git a/forensic_report.qmd b/forensic_report.qmd
new file mode 100644
index 0000000..2b45baf
--- /dev/null
+++ b/forensic_report.qmd
@@ -0,0 +1,27 @@
+---
+title: "Forensic report"
+format: html
+editor: visual
+
+---
+
+```{r}
+# TEST
+oib = "93335620125"
+```
+
+
+## Preatraga Zemljišnih knjiga
+
+
+
+```{r}
+res = zkrh("oib", "0", "true")
+
+```
+
+
+```{r}
+DT::datatable(res)
+```
+
diff --git a/functions.R b/functions.R
index 66852d5..80638c6 100644
--- a/functions.R
+++ b/functions.R
@@ -4,7 +4,7 @@ collection_name <- Sys.getenv("collection_name")
 
 
 # Funkcija za dohvaćanje podataka iz API-ja
-dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+zkrh <- function(search_term, part, history = "false", limit = 50, skip = 0) {
   response <- GET("http://dac.hr/api/v1/query",
                   query = list(
                     q = search_term,

1d7ca5a63d33bae68f0ea68cefd46e2a9c9ecf9f MislavSag Fri May 17 12:36:43 2024 +0200 new mongo search
diff --git a/radna_skripta.R b/radna_skripta.R
index 575a2d5..0cd3dbd 100644
--- a/radna_skripta.R
+++ b/radna_skripta.R
@@ -342,5 +342,70 @@ print(results)
 
 
 
+# Install and load the mongolite package
+install.packages("mongolite")
+library(mongolite)
+
+# Define the connection URI, database, and collection
+uri <- "your_atlas_connection_string" # Replace with your Atlas connection string
+database_name <- "your_database_name" # Replace with your database name
+collection_name <- "your_collection_name" # Replace with your collection name
+
+# Create a connection to the MongoDB collection
+collection <- mongo(collection = collection_name, db = database_name, url = uri)
+
+# Define the search query with multiple combinations
+query <- '[
+  {
+    "$search": {
+      "index": "ids",
+      "compound": {
+        "should": [
+          {
+            "compound": {
+              "must": [
+                { "equals": { "value": %d, "path": "lrUnitNumber" } },
+                { "text": { "query": "%s", "path": "mainBookId" } }
+              ]
+            }
+          },
+          {
+            "compound": {
+              "must": [
+                { "equals": { "value": %d, "path": "lrUnitNumber" } },
+                { "text": { "query": "%s", "path": "mainBookId" } }
+              ]
+            }
+          },
+          {
+            "compound": {
+              "must": [
+                { "equals": { "value": %d, "path": "lrUnitNumber" } },
+                { "text": { "query": "%s", "path": "mainBookId" } }
+              ]
+            }
+          }
+        ]
+      }
+    }
+  }
+]'
+
+# Replace placeholders with actual values
+lrUnitNumber_values <- c(12345, 67890, 11121) # Replace with the actual integer values
+mainBookId_values <- c("bookId1", "bookId2", "bookId3") # Replace with the actual string values
+
+# Use R's sprintf to inject the actual values into the query
+query <- sprintf(query,
+                 lrUnitNumber_values[1], mainBookId_values[1],
+                 lrUnitNumber_values[2], mainBookId_values[2],
+                 lrUnitNumber_values[3], mainBookId_values[3]
+)
+
+# Perform the aggregation query
+results <- collection$aggregate(query)
+
+# Print the search results
+print(results)
 
 

6b6800d4b7bdefb9c1591e9aab8e5380086d1867 MislavSag Fri May 17 12:35:26 2024 +0200 new mongo search
diff --git a/app.R b/app.R
index d14979f..df2b686 100644
--- a/app.R
+++ b/app.R
@@ -6,18 +6,19 @@ library(bslib)
 library(DT)
 library(httr)
 library(jsonlite)
-library(tidyverse)
+# library(tidyverse) # TODO: install individual packages
 library(data.table)
 library(shinydashboard)
 library(mongolite)
 
-library(microbenchmark) # izračun vremena operacija
+# library(microbenchmark) # izračun vremena operacija
 
 # Učitavanje zasebnih skripti
 source("functions.R")
 
 # Učitajte varijable okruženja
 db_url <- Sys.getenv("db_url")
+print(db_url)
 db_name <- Sys.getenv("db_name")
 collection_name <- Sys.getenv("collection_name")
 
@@ -73,7 +74,7 @@ server <- function(input, output) {
 
     # Dohvaćanje rezultata pretrage iz API-ja
     api_data <- dac_hr_api(input$term, input$checkbox, input$history)
-    if (nrow(api_data) == 0) return(data.table())
+    if (nrow(api_data) == 0) return(data.table(Rezultat = "Nem rezultata pretrage"))
 
     # Dohvaćanje dokumenata iz MongoDB-a
     mongo_data <- get_doc_MongoDB(api_data$id)
@@ -92,6 +93,10 @@ server <- function(input, output) {
   })
 
   output$rezultati_tab <- renderDT({
+    if (length(pretraga_rezultati()) == 0) {
+      return(data.table(Rezultat = "Nem rezultata pretrage"))
+    }
+
     datatable(pretraga_rezultati(), escape = FALSE, options = list(
       columnDefs = list(
         list(targets = ncol(pretraga_rezultati()),  # Dinamičko određivanje indeksa stupca fileUrl
diff --git a/functions.R b/functions.R
index c4ce5d2..66852d5 100644
--- a/functions.R
+++ b/functions.R
@@ -1,3 +1,8 @@
+db_url <- Sys.getenv("db_url")
+db_name <- Sys.getenv("db_name")
+collection_name <- Sys.getenv("collection_name")
+
+
 # Funkcija za dohvaćanje podataka iz API-ja
 dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
   response <- GET("http://dac.hr/api/v1/query",
diff --git a/radna_skripta.R b/radna_skripta.R
index a02db65..575a2d5 100644
--- a/radna_skripta.R
+++ b/radna_skripta.R
@@ -192,6 +192,10 @@ get_doc_MongoDB <- function(ids) {
 
 # Nova funkcija koja koristi tstrsplit i datatable umjesto lapply
 get_doc_MongoDB_2 <- function(ids) {
+  # DEBUG
+  # ids <- c("zk-285-50135-13132", "zk-285-31389-4128")
+  # ids <- rep(ids, 10)
+
   # Povezivanje na MongoDB
   conn <- mongo(collection = collection_name, db = db_name, url = db_url)
 
@@ -273,7 +277,7 @@ conn$disconnect()
 #-------------------------------# Testiranje Servera #--------------------------
 
 # TESTIRANJE FUNKCIJA U SERVERU
-api_data <- dac_hr_api("62694367015", 0, "true") # 62694367015
+api_data <- dac_hr_api("47432874968", 0, "true") # 62694367015
 
 ids <- c(api_data$id)
 
@@ -292,4 +296,51 @@ final_data <- final_data[, .(id, type, unit, institution, book, status, burden,
 
 
 
+# TEST ATLAS SEARCH -------------------------------------------------------
+# Replace with your actual connection details
+conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+# FIELDS_NAME_Q = [
+#   "ownershipSheetB.lrUnitShares.lrOwners.name",
+#   "ownershipSheetB.lrUnitShares.lrOwners.taxNumber",
+#   "ownershipSheetB.lrUnitShares.subSharesAndEntries.lrOwners.name"
+# ]
+
+# Define the search query using the aggregation pipeline
+desired_lrUnitNumber_value <- 1202 # Replace with the actual integer value you are searching for
+desired_mainBookId_value <- "21148" # Replace with the actual string value you are searching for
+
+query <- sprintf('[
+  {
+    "$search": {
+      "index": "ids",
+      "compound": {
+        "should": [
+          {
+            "equals": {
+              "value": %d,
+              "path": "lrUnitNumber"
+            }
+          },
+          {
+            "text": {
+              "query": "%s",
+              "path": "mainBookId"
+            }
+          }
+        ]
+      }
+    }
+  }
+]', desired_lrUnitNumber_value, desired_mainBookId_value)
+# Execute the search query
+results <- conn$aggregate(pipeline = query)
+
+# Print the search results
+print(results)
+
+
+
+
+
 
diff --git a/renv.lock b/renv.lock
index 0b1e7f6..cea9109 100644
--- a/renv.lock
+++ b/renv.lock
@@ -9,6 +9,23 @@
     ]
   },
   "Packages": {
+    "DT": {
+      "Package": "DT",
+      "Version": "0.33",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "crosstalk",
+        "htmltools",
+        "htmlwidgets",
+        "httpuv",
+        "jquerylib",
+        "jsonlite",
+        "magrittr",
+        "promises"
+      ],
+      "Hash": "64ff3427f559ce3f2597a4fe13255cb6"
+    },
     "R6": {
       "Package": "R6",
       "Version": "2.5.1",
@@ -30,6 +47,16 @@
       ],
       "Hash": "5ea2700d21e038ace58269ecdbeb9ec0"
     },
+    "askpass": {
+      "Package": "askpass",
+      "Version": "1.2.0",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Requirements": [
+        "sys"
+      ],
+      "Hash": "cad6cf7f1d5f6e906700b9d3e718c796"
+    },
     "base64enc": {
       "Package": "base64enc",
       "Version": "0.1-3",
@@ -42,13 +69,14 @@
     },
     "bslib": {
       "Package": "bslib",
-      "Version": "0.6.1",
+      "Version": "0.7.0",
       "Source": "Repository",
-      "Repository": "RSPM",
+      "Repository": "CRAN",
       "Requirements": [
         "R",
         "base64enc",
         "cachem",
+        "fastmap",
         "grDevices",
         "htmltools",
         "jquerylib",
@@ -59,7 +87,7 @@
         "rlang",
         "sass"
       ],
-      "Hash": "c0d8599494bc7fb408cd206bbdd9cab0"
+      "Hash": "8644cc53f43828f19133548195d7e59e"
     },
     "cachem": {
       "Package": "cachem",
@@ -102,6 +130,40 @@
       ],
       "Hash": "e8a1e41acf02548751f45c718d55aa6a"
     },
+    "crosstalk": {
+      "Package": "crosstalk",
+      "Version": "1.2.1",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R6",
+        "htmltools",
+        "jsonlite",
+        "lazyeval"
+      ],
+      "Hash": "ab12c7b080a57475248a30f4db6298c0"
+    },
+    "curl": {
+      "Package": "curl",
+      "Version": "5.2.1",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Requirements": [
+        "R"
+      ],
+      "Hash": "411ca2c03b1ce5f548345d2fc2685f7a"
+    },
+    "data.table": {
+      "Package": "data.table",
+      "Version": "1.15.4",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R",
+        "methods"
+      ],
+      "Hash": "8ee9ac56ef633d0c7cab8b2ca87d683e"
+    },
     "digest": {
       "Package": "digest",
       "Version": "0.6.35",
@@ -124,6 +186,17 @@
       ],
       "Hash": "bb0eec2fe32e88d9e2836c2f73ea2077"
     },
+    "evaluate": {
+      "Package": "evaluate",
+      "Version": "0.23",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Requirements": [
+        "R",
+        "methods"
+      ],
+      "Hash": "daf4a1246be12c1fa8c7705a0935c1a0"
+    },
     "fastmap": {
       "Package": "fastmap",
       "Version": "1.1.1",
@@ -165,22 +238,47 @@
       ],
       "Hash": "e0b3a53876554bd45879e596cdb10a52"
     },
+    "highr": {
+      "Package": "highr",
+      "Version": "0.10",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Requirements": [
+        "R",
+        "xfun"
+      ],
+      "Hash": "06230136b2d2b9ba5805e1963fa6e890"
+    },
     "htmltools": {
       "Package": "htmltools",
-      "Version": "0.5.7",
+      "Version": "0.5.8.1",
       "Source": "Repository",
-      "Repository": "RSPM",
+      "Repository": "CRAN",
       "Requirements": [
         "R",
         "base64enc",
         "digest",
-        "ellipsis",
         "fastmap",
         "grDevices",
         "rlang",
         "utils"
       ],
-      "Hash": "2d7b3857980e0e0d0a1fd6f11928ab0f"
+      "Hash": "81d371a9cc60640e74e4ab6ac46dcedc"
+    },
+    "htmlwidgets": {
+      "Package": "htmlwidgets",
+      "Version": "1.6.4",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "grDevices",
+        "htmltools",
+        "jsonlite",
+        "knitr",
+        "rmarkdown",
+        "yaml"
+      ],
+      "Hash": "04291cc45198225444a397606810ac37"
     },
     "httpuv": {
       "Package": "httpuv",
@@ -197,6 +295,21 @@
       ],
       "Hash": "16abeb167dbf511f8cc0552efaf05bab"
     },
+    "httr": {
+      "Package": "httr",
+      "Version": "1.4.7",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Requirements": [
+        "R",
+        "R6",
+        "curl",
+        "jsonlite",
+        "mime",
+        "openssl"
+      ],
+      "Hash": "ac107251d9d9fd72f0ca8049988f1d7f"
+    },
     "jquerylib": {
       "Package": "jquerylib",
       "Version": "0.1.4",
@@ -217,6 +330,22 @@
       ],
       "Hash": "e1b9c55281c5adc4dd113652d9e26768"
     },
+    "knitr": {
+      "Package": "knitr",
+      "Version": "1.46",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R",
+        "evaluate",
+        "highr",
+        "methods",
+        "tools",
+        "xfun",
+        "yaml"
+      ],
+      "Hash": "6e008ab1d696a5283c79765fa7b56b47"
+    },
     "later": {
       "Package": "later",
       "Version": "1.3.2",
@@ -228,6 +357,16 @@
       ],
       "Hash": "a3e051d405326b8b0012377434c62b37"
     },
+    "lazyeval": {
+      "Package": "lazyeval",
+      "Version": "0.2.2",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R"
+      ],
+      "Hash": "d908914ae53b04d4c0c0fd72ecc35370"
+    },
     "lifecycle": {
       "Package": "lifecycle",
       "Version": "1.0.4",
@@ -272,6 +411,28 @@
       ],
       "Hash": "18e9c28c1d3ca1560ce30658b22ce104"
     },
+    "mongolite": {
+      "Package": "mongolite",
+      "Version": "2.8.0",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "jsonlite",
+        "mime",
+        "openssl"
+      ],
+      "Hash": "b25506e512fa8d7c5a5d57846964c40c"
+    },
+    "openssl": {
+      "Package": "openssl",
+      "Version": "2.1.2",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "askpass"
+      ],
+      "Hash": "ea2475b073243d9d338aa8f086ce973e"
+    },
     "promises": {
       "Package": "promises",
       "Version": "1.2.1",
@@ -319,6 +480,29 @@
       ],
       "Hash": "42548638fae05fd9a9b5f3f437fbbbe2"
     },
+    "rmarkdown": {
+      "Package": "rmarkdown",
+      "Version": "2.26",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R",
+        "bslib",
+        "evaluate",
+        "fontawesome",
+        "htmltools",
+        "jquerylib",
+        "jsonlite",
+        "knitr",
+        "methods",
+        "tinytex",
+        "tools",
+        "utils",
+        "xfun",
+        "yaml"
+      ],
+      "Hash": "9b148e7f95d33aac01f31282d49e4f44"
+    },
     "sass": {
       "Package": "sass",
       "Version": "0.4.9",
@@ -367,6 +551,20 @@
       ],
       "Hash": "3a1f41807d648a908e3c7f0334bf85e6"
     },
+    "shinydashboard": {
+      "Package": "shinydashboard",
+      "Version": "0.7.2",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "R",
+        "htmltools",
+        "promises",
+        "shiny",
+        "utils"
+      ],
+      "Hash": "e418b532e9bb4eb22a714b9a9f1acee7"
+    },
     "sourcetools": {
       "Package": "sourcetools",
       "Version": "0.1.7-1",
@@ -377,6 +575,23 @@
       ],
       "Hash": "5f5a7629f956619d519205ec475fe647"
     },
+    "sys": {
+      "Package": "sys",
+      "Version": "3.4.2",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Hash": "3a1be13d68d47a8cd0bfd74739ca1555"
+    },
+    "tinytex": {
+      "Package": "tinytex",
+      "Version": "0.50",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "xfun"
+      ],
+      "Hash": "be7a76845222ad20adb761f462eed3ea"
+    },
     "withr": {
       "Package": "withr",
       "Version": "3.0.0",
@@ -389,6 +604,18 @@
       ],
       "Hash": "d31b6c62c10dcf11ec530ca6b0dd5d35"
     },
+    "xfun": {
+      "Package": "xfun",
+      "Version": "0.43",
+      "Source": "Repository",
+      "Repository": "CRAN",
+      "Requirements": [
+        "grDevices",
+        "stats",
+        "tools"
+      ],
+      "Hash": "ab6371d8653ce5f2f9290f4ec7b42a8e"
+    },
     "xtable": {
       "Package": "xtable",
       "Version": "1.8-4",
@@ -400,6 +627,13 @@
         "utils"
       ],
       "Hash": "b8acdf8af494d9ec19ccb2481a9b11c2"
+    },
+    "yaml": {
+      "Package": "yaml",
+      "Version": "2.3.8",
+      "Source": "Repository",
+      "Repository": "RSPM",
+      "Hash": "29240487a071f535f5e5d5a323b7afbd"
     }
   }
 }

ec9af9a4f9b04be58363730754f8548fa5aa3b2b mmatic97 Thu May 16 12:57:39 2024 +0200 proba
diff --git a/#todo b/#todo
index c8eb70e..89a1a6c 100644
--- a/#todo
+++ b/#todo
@@ -15,19 +15,3 @@
 # Shiny modul
 
 
-id: zk-285-50135-13132
-type: zk
-unit: 13132
-institution: Zemljišnoknjižni odjel Zagreb
-book: ČUČERJE NOVO
-status: Aktivan
-burden: false
-
-# OIB 62694367015
-
-
-
-# u novo_privremeno - želim ubaciti fields u MongoDB funkciju da mi izvlači samo
-bitne varijable
-
-# onda ću se igrati sa merge varijablom

6be25efef59570e056364508a4344d28c8b06c3c Your Name Thu May 16 12:47:39 2024 +0200 ver 1
diff --git a/#todo b/#todo
new file mode 100644
index 0000000..c8eb70e
--- /dev/null
+++ b/#todo
@@ -0,0 +1,33 @@
+# history parametar tražilica - DA/NE
+
+# ovo ubaciti u kod: httr::status_code(response) - 200 oznaka za uspješan zahtjev
+
+
+### MONGODB skupni zahtjevi
+# skini URL i ID i onda spoji
+# bolji način: Mongo vrati redosljed URL po kojem je poslan upit
+# Mongo mi moze vratiti samo ID i URL, ne treba cijeli json
+
+# INDEKSI
+# napraviti dva pojedinačna umjesto jedan slozeni indeks
+# zašto ne moze napraviti slozeni indeks ?
+
+# Shiny modul
+
+
+id: zk-285-50135-13132
+type: zk
+unit: 13132
+institution: Zemljišnoknjižni odjel Zagreb
+book: ČUČERJE NOVO
+status: Aktivan
+burden: false
+
+# OIB 62694367015
+
+
+
+# u novo_privremeno - želim ubaciti fields u MongoDB funkciju da mi izvlači samo
+bitne varijable
+
+# onda ću se igrati sa merge varijablom
diff --git a/.gitignore b/.gitignore
index 221b531..402911f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,4 @@
 .Rhistory
 .RData
 .Ruserdata
-.Renviron
+.Renviron
\ No newline at end of file
diff --git a/README.md b/README.md
deleted file mode 100644
index f5e21a2..0000000
--- a/README.md
+++ /dev/null
@@ -1,4 +0,0 @@
-TODO:
-1. Dodati url
-2. Dodati parametre iznad/ispod text inputa za pretrazivanje
-3. Dodati pretragu za RS katastar
diff --git a/app.R b/app.R
index f9c1f9f..d14979f 100644
--- a/app.R
+++ b/app.R
@@ -1,67 +1,122 @@
+#-------------------------------------------------------------------------------
+#-----------------------------------# PAKETI #----------------------------------
+
 library(shiny)
 library(bslib)
 library(DT)
+library(httr)
+library(jsonlite)
+library(tidyverse)
+library(data.table)
+library(shinydashboard)
+library(mongolite)
+
+library(microbenchmark) # izračun vremena operacija
 
+# Učitavanje zasebnih skripti
+source("functions.R")
 
-### VERSION 1
+# Učitajte varijable okruženja
+db_url <- Sys.getenv("db_url")
+db_name <- Sys.getenv("db_name")
+collection_name <- Sys.getenv("collection_name")
 
-ui <- page_navbar(
-  title = "Forensis",
-  id = "nav",
-  sidebar = sidebar(
-    conditionalPanel(
-      "input.nav === 'Nekretnine RH'",
+#------------------------------# UI (User interface) #--------------------------
 
-      checkboxGroupInput("checkbox", "Pretraži dio",
-                         choices = c("Sve", "Dio A", "Dio B", "Dio C"))
+ui <- dashboardPage(
+  dashboardHeader(title = "Forensis"),
+  dashboardSidebar(
+    sidebarMenu(
+      menuItem("Pretraga", tabName = "pretraga", icon = icon("search")),
+      menuItem("Analiza", tabName = "analiza", icon = icon("chart-line"))
+    ),
+    collapsible = TRUE,
+    collapsed = TRUE
+  ),
+  dashboardBody(
+    tabItems(
+      tabItem(tabName = "pretraga",
+              fluidPage(
+                titlePanel("Pretraga Katastra"),
+                sidebarLayout(
+                  sidebarPanel(
+                    textInput("term", "Unesite pojam za pretragu katastra", value = ""),
+                    radioButtons("checkbox", "Pretraži dio",
+                                 choices = list("Sve" = "0", "Dio A" = "1", "Dio B" = "2", "Dio C" = "3"),
+                                 selected = "0"),
+                    radioButtons("history", "Povijest",
+                                 choices = list("Da" = "true", "Ne" = "false"),
+                                 selected = "true"),
+                    actionButton("pretraga", "Pretraži", style = "width:100%;")
+                  ),
+                  mainPanel(
+                    dataTableOutput("rezultati_tab")
+                  )
+                )
+              )
       ),
-    conditionalPanel(
-      "input.nav === 'Nekretnine RS'",
-      "test"
+      tabItem(tabName = "analiza",
+              fluidPage(
+                titlePanel("Analiza Podataka")
+              )
+      )
     )
-  ),
-  nav_panel("Nekretnine RH",
-            textInput("nekretninerh_q",
-                      "Unesite pojam za pretragu ZK i KPU",
-                      width = "100%")),
-  nav_panel("Nekretnine RS",
-            textInput("nekretniners_q",
-                      "Unesite pojam za pretragu katastra RS",
-                      width = "100%"))
+  )
 )
 
+#-------------------------------------------------------------------------------
+#-----------------------------------# SERVER #----------------------------------
+
 server <- function(input, output) {
-  # output$p <- renderPlot({
-  #   textInput("caption", "Caption", "Data Summary")
-  # })
-  # output$nekretninerh_q = render
+  pretraga_rezultati <- eventReactive(input$pretraga, {
+    req(input$term)
+
+    # Dohvaćanje rezultata pretrage iz API-ja
+    api_data <- dac_hr_api(input$term, input$checkbox, input$history)
+    if (nrow(api_data) == 0) return(data.table())
+
+    # Dohvaćanje dokumenata iz MongoDB-a
+    mongo_data <- get_doc_MongoDB(api_data$id)
+
+    # Spajanje podataka
+    final_data <- spoji_podatke(api_data, mongo_data)
+
+    # Ažuriranje URL-a
+    base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
+    final_data[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]
+
+    # Odabir potrebnih varijabli
+    final_data <- final_data[, .(id, type, unit, institution, book, status, burden, fileUrl)]
+
+    return(final_data)
+  })
+
+  output$rezultati_tab <- renderDT({
+    datatable(pretraga_rezultati(), escape = FALSE, options = list(
+      columnDefs = list(
+        list(targets = ncol(pretraga_rezultati()),  # Dinamičko određivanje indeksa stupca fileUrl
+             render = JS(
+               "function(data, type, row) {
+                 return type === 'display' && data ? '<a href=\"' + data + '\" target=\"_blank\">Open</a>' : data;
+               }"
+             )
+        )
+      )
+    ))
+  })
 }
 
+#-------------------------------------------------------------------------------
+
+# Pokretanje aplikacije
 shinyApp(ui, server)
 
-### VERSION 2
-
-# ui <- page_navbar(
-#   title = "Forensis",
-#   id = "nav",
-#   sidebar = sidebar(
-#     accordion(
-#       accordion_panel(
-#         "Nekretnine RH",
-#         checkboxGroupInput("checkbox", "Pretraži dio", choices = c("Dio A", "Dio B"))
-#       ),
-#       accordion_panel(
-#         "Nekretnine RS",
-#         "Test"
-#       )
-#     )
-#   )
-# )
-#
-# server <- function(input, output) {
-#   # output$p <- renderPlot({
-#   #   textInput("caption", "Caption", "Data Summary")
-#   # })
-# }
-#
-# shinyApp(ui, server)
+
+
+
+
+
+
+
+
+
diff --git a/functions.R b/functions.R
new file mode 100644
index 0000000..c4ce5d2
--- /dev/null
+++ b/functions.R
@@ -0,0 +1,75 @@
+# Funkcija za dohvaćanje podataka iz API-ja
+dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+  response <- GET("http://dac.hr/api/v1/query",
+                  query = list(
+                    q = search_term,
+                    history = history,
+                    limit = limit,
+                    skip = skip,
+                    part = part
+                  ),
+                  add_headers(`X-DataApi-Key` = "59dd75a6525e"))
+
+  if (httr::status_code(response) != 200) {
+    stop("HTTP request failed with status ", httr::status_code(response))
+  }
+
+  res <- content(response)
+  if (is.null(res$hits) || length(res$hits) == 0) {
+    return(data.table())
+  } else {
+    dt <- rbindlist(res$hits, fill = TRUE)
+
+    # Dodaj identifikatore - bitno za spajanje sa MongoDB
+    dt$id_parts <- strsplit(dt$id, "-")
+    dt$institutionId <- sapply(dt$id_parts, function(x) x[2])
+    dt$mainBookId <- sapply(dt$id_parts, function(x) x[3])
+    dt$lrUnitNumber <- sapply(dt$id_parts, function(x) x[4])
+
+    return(dt)
+  }
+}
+
+# Funkcija za dohvaćanje dokumenata iz MongoDB baze
+get_doc_MongoDB <- function(ids) {
+  # Povezivanje na MongoDB
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  # Razdvajanje ID-ova na dijelove
+  id_parts <- tstrsplit(ids, "-", fixed = TRUE)
+  conditions <- data.table(
+    lrUnitNumber = id_parts[[4]],
+    mainBookId = as.numeric(id_parts[[3]])
+  )
+
+  # Konverzija uvjeta u listu imenovanih listi
+  conditions_list <- lapply(1:nrow(conditions), function(i) {
+    list(lrUnitNumber = conditions$lrUnitNumber[i], mainBookId = conditions$mainBookId[i])
+  })
+
+  # Konverzija u JSON format
+  query <- jsonlite::toJSON(list('$or' = conditions_list), auto_unbox = TRUE)
+
+  # Pokretanje upita
+  documents <- conn$find(query, fields = '{"institutionId" : true, "lrUnitNumber" : true,
+                                          "mainBookId" : true, "fileUrl" : true}')
+  conn$disconnect()
+
+  return(documents)
+}
+
+# Funkcija za spajanje podataka bez prepare_mongo_documents
+spoji_podatke <- function(api_data, mongo_data) {
+  # data.table format
+  mongo_data <- as.data.table(mongo_data)
+
+  # Convert to chr type
+  mongo_data[, lrUnitNumber := as.character(lrUnitNumber)]
+  mongo_data[, mainBookId := as.character(mainBookId)]
+  mongo_data[, institutionId := as.character(institutionId)]
+
+  # merge
+  spojena_tablica <- merge(api_data, mongo_data, by = c("institutionId", "mainBookId", "lrUnitNumber"), all.x = TRUE)
+
+  return(spojena_tablica)
+}
diff --git a/modul_nekretnine_rh.R b/modul_nekretnine_rh.R
index 2325c8e..f94781c 100644
--- a/modul_nekretnine_rh.R
+++ b/modul_nekretnine_rh.R
@@ -4,6 +4,9 @@ Sys.getenv("TOKEN")
 Sys.getenv("IME")
 
 
+api_key <- Sys.getenv("TOKEN")
+print(api_key)
+
 # DATA API ----------------------------------------------------------------
 # Search ZK
 zk_l = lapply(terms, function(x) {
@@ -15,7 +18,7 @@ zk_l = lapply(terms, function(x) {
             limit = 100,
             skip = 0
           ),
-          add_headers(`X-DataApi-Key` = Sys.getenv("TOKEN")))
+          add_headers(`X-DataApi-Key` = api_key))
   res = content(p)
   res = rbindlist(res$hits)
   as.data.table(cbind.data.frame(term = x, res))
@@ -24,3 +27,80 @@ lapply(zk_l, function(x) nrow(x))
 lapply(zk_l, function(x) nrow(x[type == "zk"]))
 zkdt = rbindlist(zk_l)
 zkdt_unique = unique(zkdt[, .SD, .SDcols = -"term"])
+
+
+#-------------------------------------------------------------------------------
+
+# Osnovni URL API-ja
+url <- "http://dac.hr/api/v1/query"
+
+# Postavljanje headera zahtjeva
+headers <- add_headers(`X-DataApi-Key` = "59dd75a6525e")
+
+# Definiranje pojmova za pretragu
+pojmovi <- c("INA d.d.", "Ina - industrija nafte d.d.", "27759560625")
+
+# Možda korisni drugi pojmovi ? - asocijacije s Info.Biz
+# (1) adresa: "Avenija Većeslava Holjevca 10, 10000 Zagreb"
+# (2) matični broj: "03586243"
+# (3) djelatnost: "1920 - Proizvodnja rafiniranih naftnih proizvoda"
+
+# Prazni data.table za spremanje rezultata
+rezultati_dt <- data.table()
+
+# Petlja za iteraciju kroz svaki pojam i izvršavanje API zahtjeva
+for (pojam in pojmovi) {
+  # Postavljanje parametara zahtjeva za svaki pojam
+  params <- list(
+    q = pojam,
+    history = "true",
+    limit = 1000,
+    skip = 0
+  )
+
+  # Slanje GET zahtjeva
+  response <- GET(url, query = params, headers)
+
+  # Dohvaćanje sirovog sadržaja odgovora
+  res_raw <- content(response, "text")
+
+  # Dekodiranje JSON sadržaja u listu
+  # ovo mi je napravio chat GPT i ima više smisla nego direktno res <- content(response)
+  res <- fromJSON(res_raw)
+
+  # Ako res$hits ne postoji, preskoči ovu iteraciju
+  if (is.null(res$hits) || length(res$hits) == 0) next
+
+  # Pretvaranje dobivenih podataka u data.table
+  dt <- rbindlist(list(res$hits), fill = TRUE)
+
+  # Ako nema imena, preskoči daljnje obrade
+  if (is.null(colnames(dt))) next
+
+  # Dodavanje kolone 'pojam' s trenutnim pojmom pretrage
+  dt[, pojam := pojam]
+
+  # Spremanje rezultata u glavni data.table
+  rezultati_dt <- rbindlist(list(rezultati_dt, dt), fill = TRUE)
+}
+
+# Eksportiranje finalnih rezultata u CSV datoteku
+fwrite(rezultati_dt, "INA_podaci.csv")
+# Eksportiranje finalnih rezultata u Excel datoteku
+write.xlsx(rezultati_dt, "INA_podaci.xlsx")
+
+
+# Ovo je kratki kod da maknem dupliće (meni najlakše preko tidyverse, ali mogu napisati u data.table)
+rezultati_unique <- rezultati_dt %>%
+  select(!pojam) %>%
+  unique()
+
+
+
+
+
+
+
+
+
+
diff --git a/radna_skripta.R b/radna_skripta.R
new file mode 100644
index 0000000..a02db65
--- /dev/null
+++ b/radna_skripta.R
@@ -0,0 +1,295 @@
+#-------------------------------------------------------------------------------
+#---------------------------# dac_hr_api funckija #-----------------------------
+
+dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+  response <- GET("http://dac.hr/api/v1/query",
+                  query = list(
+                    q = search_term,
+                    history = history,  # Koristi history parametar iz UI
+                    limit = limit,
+                    skip = skip,
+                    part = part
+                  ),
+                  add_headers(`X-DataApi-Key` = "59dd75a6525e"))
+
+  # Provjera statusnog koda odgovora
+  if (httr::status_code(response) != 200) {
+    stop("HTTP request failed with status ", httr::status_code(response))
+  }
+
+  res <- content(response)
+  if (is.null(res$hits) || length(res$hits) == 0) {
+    return(data.table())  # Vraća prazan data.table ako nema rezultata
+  } else {
+    dt <- rbindlist(res$hits, fill = TRUE)
+    return(dt)
+  }
+}
+
+# u funckiju za shiny se id dodatno dijeli na inentifikatore koji služe za spajanje
+# podataka sa MongoDB dokumentima
+
+dac_dt <- dac_hr_api("62694367015", 0, history = "false")
+
+#-------------------------------------------------------------------------------
+#------------------------# Izvlačenje url-a iz MongoDB #------------------------
+
+# ovo je prva funkcija s kojom sam izvlačio podatke iz MongoDB (MongoDB_get_doc)
+# međutim, funkcija šalje pojedinačne podatke pa je zato sporija
+# dodati ću dolje i bržu funkciju
+
+# Funkcija za dohvaćanje dokumenta iz MongoDB baze
+MongoDB_get_doc <- function(ids) {
+  documents <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]  # Zadnji element kao string
+    mainBookId <- as.numeric(parts[length(parts)-1])  # Predzadnji element pretvoren u numeric
+
+    query <- sprintf('{"lrUnitNumber": "%s", "mainBookId": %d}', lrUnitNumber, mainBookId)
+    conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+    document <- conn$find(query)
+
+    return(document)
+  })
+
+  return(documents)
+}
+
+source("pristupni_podaci.R")
+
+# Primjer vektora ID-ova koji dobivaš iz pretrage
+ids <- c("zk-285-50135-13132", "zk-285-31389-4128")
+
+# Pozivanje funkcije i spremanje rezultata
+documents <- MongoDB_get_doc(ids)
+
+# Izvlačenje 'fileUrl' iz svakog dokumenta
+fileUrls <- MongoDB_urls(documents)
+
+# Prikaz svih 'fileUrl' dobivenih iz dokumenata
+print(fileUrls)
+
+#-------------------------------------------------------------------------------
+#------------------------# get_doc_MongoDB funkcija #---------------------------
+
+# ovdje stavljam funkiciju koja izvlači podatke iz MongoDB baze, ali ne pojedinačno
+# nego grupno pomoću $or operatora
+
+# Funkcija za dohvaćanje dokumenta iz MongoDB baze
+get_doc_MongoDB <- function(ids) {
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+    list(lrUnitNumber = lrUnitNumber, mainBookId = mainBookId)
+  })
+
+  query <- jsonlite::toJSON(list('$or' = conditions), auto_unbox = TRUE)
+  documents <- conn$find(query)
+  conn$disconnect()
+
+  return(documents)
+}
+
+# Funkcija za izvlačenje 'fileUrl' iz dokumenta
+extract_file_urls <- function(documents) {
+  # Provjera postoji li stupac 'fileUrl' u data frame-u
+  if ("fileUrl" %in% names(documents)) {
+    # Vraća vektor URL-ova ili NA ako je URL prazan (NULL ili ne postoji)
+    fileUrls <- sapply(documents$fileUrl, function(url) {
+      if (!is.null(url) && nzchar(url)) {
+        return(url)
+      } else {
+        return(NA)
+      }
+    })
+    return(fileUrls)
+  } else {
+    # Vraća NA vektor ako nema stupca 'fileUrl'
+    return(rep(NA, nrow(documents)))
+  }
+}
+
+documents <- get_doc_MongoDB(ids)
+extract_file_urls(documents)
+
+#-------------------------------------------------------------------------------
+#-----------------# Benchmark - izvlačenje podataka iz MongoDB #----------------
+
+# Definiranje pristupnih podataka
+source("pristupni_podaci.R")
+
+ids <- c("zk-285-50135-13132", "zk-285-31389-4128")
+ids_50 <- rep(ids, 50)
+
+
+# Stara funkcija - pojedinačni zahtjev
+get_documents_staro <- function(ids) {
+  documents <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+
+    query <- sprintf('{"lrUnitNumber": "%s", "mainBookId": %d}', lrUnitNumber, mainBookId)
+    conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+    document <- conn$find(query)
+    conn$disconnect()
+
+    return(document)
+  })
+  return(documents)
+}
+
+# Nova optimizirana funkcija - više zahtjeva odjednom
+get_documents_novo <- function(ids) {
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]
+    mainBookId <- as.numeric(parts[length(parts)-1])
+    list(lrUnitNumber = lrUnitNumber, mainBookId = mainBookId)
+  })
+
+  query <- jsonlite::toJSON(list('$or' = conditions), auto_unbox = TRUE)
+  documents <- conn$find(query)
+  conn$disconnect()
+
+  return(documents)
+}
+
+benchmark_result <- microbenchmark(
+  old = get_documents_staro(ids_50),
+  new = get_documents_novo(ids_50),
+  times = 10  # Broj ponavljanja testa za bolju statistiku
+)
+
+print(benchmark_result)
+
+#-------------------------------------------------------------------------------
+#---------------------# Benchmark - MongoDB lappy vs DT #-----------------------
+
+# Definiranje pristupnih podataka
+source("pristupni_podaci.R")
+
+# stara funckija koja radi uzas od strukture podataka s listama, ali je točna
+get_doc_MongoDB <- function(ids) {
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+  conditions <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    list(lrUnitNumber = parts[length(parts)], mainBookId = as.numeric(parts[length(parts)-1]))
+  })
+  query <- jsonlite::toJSON(list('$or' = conditions), auto_unbox = TRUE)
+  # selektiraju se samo relevantne varijable - po potrebi promijeniti
+  documents <- conn$find(query, fields = '{"institutionId" : true, "lrUnitNumber" : true,
+                       "mainBookId" : true, "fileUrl" : true}')
+  conn$disconnect()
+  return(documents)
+}
+
+
+# Nova funkcija koja koristi tstrsplit i datatable umjesto lapply
+get_doc_MongoDB_2 <- function(ids) {
+  # Povezivanje na MongoDB
+  conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+  # Razdvajanje ID-ova na dijelove
+  id_parts <- tstrsplit(ids, "-", fixed = TRUE)
+  conditions <- data.table(
+    lrUnitNumber = id_parts[[4]],
+    mainBookId = as.numeric(id_parts[[3]])
+  )
+
+  # Konverzija uvjeta u listu imenovanih listi
+  conditions_list <- lapply(1:nrow(conditions), function(i) {
+    list(lrUnitNumber = conditions$lrUnitNumber[i], mainBookId = conditions$mainBookId[i])
+  })
+
+  # Konverzija u JSON format
+  query <- jsonlite::toJSON(list('$or' = conditions_list), auto_unbox = TRUE)
+
+  # Pokretanje upita
+  documents <- conn$find(query, fields = '{"institutionId" : true, "lrUnitNumber" : true,
+                                          "mainBookId" : true, "fileUrl" : true}')
+  conn$disconnect()
+
+  return(documents)
+}
+
+ids <- c("zk-285-50135-13132", "zk-285-31389-4128")
+ids_50 <- rep(ids, 300)
+
+# Usporedba vremena izvršavanja
+benchmark_result <- microbenchmark(
+  old = get_doc_MongoDB(ids_50),
+  new = get_doc_MongoDB_2(ids_50),
+  times = 20  # Broj ponavljanja testa za bolju statistiku
+)
+
+# Ispis rezultata
+print(benchmark_result)
+
+# ZAKLJUČAK: nova funkcija je minimalno brža, ali lijepša u kodu pa nastavljam s njom
+# na serveru. Ime funckije ostaje get_doc_MongoDB
+
+
+# STARA FUNKCIJA JE UKLJUČIVALA I OVO:
+# Priprema podataka za spajanje
+prepare_mongo_documents <- function(mongo_documents) {
+  mongo_documents$lrUnitNumber <- sapply(mongo_documents$lrUnitNumber, function(x) as.character(unlist(x)))
+  mongo_documents$mainBookId <- sapply(mongo_documents$mainBookId, function(x) as.character(unlist(x)))
+  mongo_documents$institutionId <- sapply(mongo_documents$institutionId, function(x) as.character(unlist(x)))
+  return(mongo_documents)
+}
+
+# Funkcija za spajanje podataka
+spoji_podatke <- function(api_data, mongo_data) {
+  mongo_data <- prepare_mongo_documents(mongo_data)
+  spojena_tablica <- merge(api_data, mongo_data, by = c("institutionId", "mainBookId", "lrUnitNumber"), all.x = TRUE)
+  return(spojena_tablica)
+}
+
+#-------------------------------------------------------------------------------
+#---------------------------------# indexes #-----------------------------------
+
+# Ponovno povezivanje ako je konekcija zatvorena
+conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+
+# Listanje indeksa
+indexes <- conn$index()
+
+# Ja sam kreirao indekse direktno na webu, ali se moze i iz R-a:
+# conn$index(add = '{"lrUnitNumber": 1}')
+# GPT kaze da MongoDB automatski koristi indekse. Nažalost, provjeru ne mogu
+# napraviti iz R-a. Potrebno je preko compassa napraviti query i napraviti analizu
+# brzine i optimalnosti koda
+
+# Zatvaranje konekcije
+conn$disconnect()
+
+#-------------------------------------------------------------------------------
+#-------------------------------# Testiranje Servera #--------------------------
+
+# TESTIRANJE FUNKCIJA U SERVERU
+api_data <- dac_hr_api("62694367015", 0, "true") # 62694367015
+
+ids <- c(api_data$id)
+
+mongo_data <- get_doc_MongoDB(ids)
+
+final_data <- spoji_podatke(api_data, mongo_data)
+
+# Ažuriranje URL-a
+base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
+final_data[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]
+
+# Odabir potrebnih varijabli
+final_data <- final_data[, .(id, type, unit, institution, book, status, burden, fileUrl)]
+
+#-------------------------------------------------------------------------------
+
+
+
+
diff --git "a/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB" "b/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB"
new file mode 100644
index 0000000..89560aa
--- /dev/null
+++ "b/stari kod ver.1 pojedina\304\215ni zahtjevi MongoDB"	
@@ -0,0 +1,182 @@
+# OVO JE STARI KOD KOJI RADI
+# MongoDB pojedinačni zahtjevi, bez indeksa
+
+#-------------------------------------------------------------------------------
+#-----------------------------------# PAKETI #----------------------------------
+
+library(shiny)
+library(bslib)
+library(DT)
+library(httr)
+library(jsonlite)
+library(tidyverse)
+library(data.table)
+library(shinydashboard)
+library(mongolite)
+
+library(microbenchmark) # izračun vremena operacija
+
+# Učitavanje zasebnih skripti
+source("functions.R")
+source("pristupni_podaci.R")
+
+
+dac_hr_api <- function(search_term, part, history = "false", limit = 50, skip = 0) {
+  response <- GET("http://dac.hr/api/v1/query",
+                  query = list(
+                    q = search_term,
+                    history = history,  # Koristi history parametar iz UI
+                    limit = limit,
+                    skip = skip,
+                    part = part
+                  ),
+                  add_headers(`X-DataApi-Key` = "59dd75a6525e"))
+
+  # Provjera statusnog koda odgovora
+  if (httr::status_code(response) != 200) {
+    stop("HTTP request failed with status ", httr::status_code(response))
+  }
+
+  res <- content(response)
+  if (is.null(res$hits) || length(res$hits) == 0) {
+    return(data.table())  # Vraća prazan data.table ako nema rezultata
+  } else {
+    dt <- rbindlist(res$hits, fill = TRUE)
+    return(dt)
+  }
+}
+
+# Funkcija za dohvaćanje dokumenta iz MongoDB baze
+MongoDB_get_doc <- function(ids) {
+  documents <- lapply(ids, function(id) {
+    parts <- unlist(strsplit(id, split = "-"))
+    lrUnitNumber <- parts[length(parts)]  # Zadnji element kao string
+    mainBookId <- as.numeric(parts[length(parts)-1])  # Predzadnji element pretvoren u numeric
+
+    query <- sprintf('{"lrUnitNumber": "%s", "mainBookId": %d}', lrUnitNumber, mainBookId)
+    conn <- mongo(collection = collection_name, db = db_name, url = db_url)
+    document <- conn$find(query)
+
+    return(document)
+  })
+
+  return(documents)
+}
+
+
+# Funkcija za izvlačenje 'fileUrl' iz dokumenta
+MongoDB_urls <- function(documents) {
+  fileUrls <- vapply(documents, function(doc) {
+    # Ovaj uvjet provjerava postoji li 'fileUrl' u dokumentu i vraća ga ako postoji
+    if (!is.null(doc$fileUrl)) {
+      return(doc$fileUrl[[1]])
+    } else {
+      # Vraća NA ako 'fileUrl' nije pronađen u dokumentu
+      return(NA_character_)  # Ovdje je ispravno korištenje NA_character_ umjesto NA
+    }
+  }, FUN.VALUE = character(1))  # Ovdje osiguravamo da povratna vrijednost bude karakter
+  return(fileUrls)
+}
+
+#-------------------------------------------------------------------------------
+#------------------------------# UI (User interface) #--------------------------
+
+ui <- dashboardPage(
+  dashboardHeader(title = "Forensis"),
+  dashboardSidebar(
+    sidebarMenu(
+      menuItem("Pretraga", tabName = "pretraga", icon = icon("search")),
+      menuItem("Analiza", tabName = "analiza", icon = icon("chart-line"))
+    ),
+    collapsible = TRUE,
+    collapsed = TRUE
+  ),
+  dashboardBody(
+    tabItems(
+      tabItem(tabName = "pretraga",
+              fluidPage(
+                titlePanel("Pretraga Katastra"),
+                sidebarLayout(
+                  sidebarPanel(
+                    textInput("term", "Unesite pojam za pretragu katastra", value = ""),
+                    radioButtons("checkbox", "Pretraži dio",
+                                 choices = list("Sve" = "0", "Dio A" = "1", "Dio B" = "2", "Dio C" = "3"),
+                                 selected = "0"),
+                    radioButtons("history", "Povijest",
+                                 choices = list("Da" = "true", "Ne" = "false"),
+                                 selected = "true"),
+                    actionButton("pretraga", "Pretraži", style = "width:100%;")  # Gumb sada zauzima cijelu širinu sidebar-a
+                  ),
+                  mainPanel(
+                    dataTableOutput("rezultati_tab")
+                  )
+                )
+              )
+      ),
+      tabItem(tabName = "analiza",
+              fluidPage(
+                titlePanel("Analiza Podataka")
+              )
+      )
+    )
+  )
+)
+
+#-------------------------------------------------------------------------------
+#-----------------------------------# SERVER #----------------------------------
+
+server <- function(input, output) {
+  pretraga_rezultati <- eventReactive(input$pretraga, {
+    req(input$term)  # Osigurava da je termin unesen
+
+    # Dohvaćanje rezultata pretrage
+    dt <- dac_hr_api(input$term, input$checkbox, input$history)
+    if (nrow(dt) == 0) return(data.table())  # Vraća prazan data.table ako nema rezultata
+
+    # Dohvaćanje dokumenata
+    documents <- MongoDB_get_doc(dt$id)
+    dt[, fileUrl := sapply(documents, function(doc) {
+      if (!is.null(doc$fileUrl)) {
+        return(doc$fileUrl[[1]])
+      } else {
+        return(NA_character_)  # Koristi NA_character_ za karakterne NAs
+      }
+    })]
+
+    base_url <- "https://oss.uredjenazemlja.hr/oss/public/reports/ldb-extract/"
+    dt[, fileUrl := ifelse(is.na(fileUrl), NA_character_, paste0(base_url, fileUrl))]  # Ažuriranje URL-a
+
+    dt  # Povrat ažuriranog data.table-a
+  })
+
+  output$rezultati_tab <- renderDT({
+    datatable(pretraga_rezultati(), escape = FALSE, options = list(
+      columnDefs = list(
+        list(targets = ncol(pretraga_rezultati()),
+             render = JS(
+               "function(data, type, row) {
+                 return type === 'display' && data ? '<a href=\"' + data + '\" target=\"_blank\">Open</a>' : data;
+               }"
+             )
+        )
+      )
+    ))
+  })
+}
+
+# Prazan server za probu UI-a
+# server <- function(input, output) {}
+#-------------------------------------------------------------------------------
+
+# upali aplikaciju
+shinyApp(ui, server)
+
+
+
+
+
+
+
+
+
+
